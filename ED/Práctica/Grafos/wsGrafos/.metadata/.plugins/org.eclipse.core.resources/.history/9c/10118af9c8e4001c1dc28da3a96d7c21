/**
 * 
 */
package grafo;

/**
 * @author UO285176
 *
 */
public class Graph<T> {

	private double[][] weights;// pesos de las aristas
	private boolean[][] edges;// matriz de aristas
	private T[] nodes;// Nodos:Lista de nodos
	private int size;// número de vértices

	@SuppressWarnings("unchecked")
	public Graph(int dimension) {
		this.nodes = (T[]) new Object[dimension];
		this.edges = new boolean[dimension][dimension];
		this.weights = new double[dimension][dimension];
		this.size = 0;// no hay vértices
	}

	/*
	 * Método que devuelve el número de vértices
	 */
	public int getSize() {
		return this.size;
	}

	/*
	 * Devuelve la matriz de pesos
	 */
	public double[][] getWeights() {
		return weights;
	}

	/*
	 * Devuelve la matriz de aristas
	 */
	public boolean[][] getEdges() {
		return edges;
	}

	/*
	 * Devuelve la posición del nodo pasado como parámetro dentro del vector de
	 * nodos y -1 si el nodo no existe
	 */
	protected int getNode(T node) {
		for (int i = 0; i < nodes.length; i++) {
			if (nodes[i].equals(node))
				return i;
		}
		return -1;
	}

	/*
	 * Indica si existe (true) o no (false) el nodo en el grafo También se comprueba
	 * que el nodo no sea null
	 */
	public boolean existsNode(T node) {
		if (node == null)
			return false;
		if (getNode(node) != -1)
			return true;
		return false;
	}

	/*
	 * Inserta un nuevo nodo que se le pasa como parámetro Si lo inserta devuelve 0
	 * Si ya existe y además no cabe devuelve -3 Si ya existe pero sí cabría, no lo
	 * inserta y devuelve -1 Si no existe pero no cabe, no lo inserta y devuelve -2
	 * Si el nodo a insertar no es válido devuelve -4 en cualquier caso
	 */
	public int addNode(T node) {
		if (existsNode(node) && getSize() == this.nodes.length)
			return -3;
		else if (existsNode(node) && getSize() < this.nodes.length)
			return -1;
		else if (!existsNode(node) && getSize() == this.nodes.length)
			return -2;
		else if (getSize() < this.nodes.length && !existsNode(node)) {
			nodes[size] = node;
			for (int i = 0; i < getSize(); i++) {
				this.edges[size][i] = false;
				this.edges[i][size] = false;
				this.weights[size][i] = 0;
				this.weights[i][size] = 0;
			}
			size++;
			return 0;
		} else
			return -4;

	}

	/*
	 * Devuelve true si existe una arista entre los nodos origen y destino y false
	 * en caso contrario o no existen los nodos
	 */
	public boolean existEdge(T source, T target) {
		int i = getNode(source);
		int j = getNode(target);
		if (i >= 0 && j >= 0)
			return this.edges[i][j];
		else
			return false;
	}

	/*
	 * Devuelve el peso de la arista que une el nodo origen y el nodo destino.
	 * Devuelve -1 si no existe origen Devuelve -2 si no existe destino Devuelve -3
	 * si no existen ambos Devuelve -4 si no existe la arista
	 */
	public double getEdge(T source, T target) {
		if (!existsNode(source) && !existsNode(target))
			return -3;
		else if (!existsNode(source))
			return -1;
		else if (!existsNode(target))
			return -2;
		else if (!existEdge(source, target))
			return -4;
		else {
			int i = getNode(source);
			int j = getNode(target);
			return this.weights[i][j];// Devuelve el peso de la arista que une el nodo origen y el nodo destino.
		}
	}

	/*
	 * Inserta una arista con el peso indicado (mayor que 0) entre dos nodos
	 * Devuelve 0 si la inserta Devuelve -1 si no existe el nodo origen Devuelve -2
	 * si no existe el nodo destino Devuelve -3 si no existen ambos Devuelve -4 si
	 * ya existe la arista Devuelve -8 si el peso no es válido
	 */
	public int addEdge(T source, T target, double weight) {
		if (weight <= 0)
			return -8;
		else if (getEdge(source, target) == -3)
			return -3;
		else if (getEdge(source, target) == -1)
			return -1;
		else if (getEdge(source, target) == -2)
			return -2;
		else if (getEdge(source, target) == -4)
			return -4;
		else {
			int i = getNode(source);
			int j = getNode(target);
			this.edges[i][j] = true;
			this.weights[i][j] = weight;
			return 0;
		}
	}

	/*
	 * Borra una arista del grafo que conecta dos nodos. Devuelve -1 si no existe el
	 * nodo origen Devuelve -2 si no existe el destino Devuelve -3 si no existen
	 * ambos Devuelve -4 si no existe la arista Devuelve 0 si la borra
	 */
	public int removeEdge(T source, T target) {
		if (getEdge(source, target) == -3)
			return -3;
		else if (getEdge(source, target) == -1)
			return -1;
		else if (getEdge(source, target) == -2)
			return -2;
		else if (getEdge(source, target) == -4)
			return -4;
		else {
			int i = 
		}
	}

//public String toString() { ... }
//
//protected int getNode(T node) { ... }
//
//public boolean existsNode(T node) {...}
//
//public int addEdge(T source, T target, double edgeWeight) { ... }
//
//public boolean existEdge(T source, T target) { ... }
//
//public double getEdge(T source, T target) { ... }
//
//public int removeEdge(T source, T target) { ... }
//
//public int removeNode(T node) { ... }
//
//public double[] dijkstra(T nodoOrigen) { ... }
//
//private int minCost(double[] vectorD, boolean[] visited) { ... }
//
//public int floyd() {…}
//
//protected double[][] getAFloyd() { … }
//
//protected T[][] getPFloyd() { … }
//
//public double minCostPath(T origen, T destino) {…}
//
//public String path(T origen, T destino) { …}
//
//public String recorridoProfundidad(T nodo) { … }
}
